/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hold_or_kp: hold_or_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_OR_KP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <0>;
        };

        mo_or_kp: mo_or_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_OR_KP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <0>;
            flavor = "balanced";
        };

        hmr_left: hmr_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <39 41 40>;
            hold-trigger-on-release;
        };

        hmr_right: hmr_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <38 36 37>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        left_enter {
            bindings = <&kp ENTER>;
            key-positions = <2 4 3>;
            require-prior-idle-ms = <180>;
        };

        setup_layer_hold {
            bindings = <&mo 7>;
            key-positions = <40 41 39>;
            require-prior-idle-ms = <500>;
        };

        left_delete {
            bindings = <&kp DELETE>;
            key-positions = <28 27>;
            require-prior-idle-ms = <180>;
        };

        game_layer_toggle {
            bindings = <&tog 6>;
            key-positions = <38 37 36>;
            require-prior-idle-ms = <500>;
        };

        left_tab {
            bindings = <&kp TAB>;
            key-positions = <3 4>;
            require-prior-idle-ms = <180>;
        };

        Numpad_Layer {
            bindings = <&mo 4>;
            key-positions = <39 31>;
        };

        Function_Layer {
            bindings = <&mo 5>;
            key-positions = <40 37>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <19 16>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <20 15>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <8 7>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <7 8 9>;
        };

        and {
            bindings = <&kp AMPERSAND>;
            key-positions = <31 32 33>;
        };

        or {
            bindings = <&kp PIPE>;
            key-positions = <31 32>;
        };

        code1 {
            bindings = <&sl 8>;
            key-positions = <38 39>;
        };

        exclamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <26 27 28>;
        };

        brace {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <14 15 16>;
        };

        brace_right {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <19 20 21>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        WRITE {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q                 &kp W                     &kp F                 &kp P                                &kp B                &kp J              &kp L                     &kp U                   &kp Y                       &kp SQT                 &none
&none  &hmr_left LEFT_GUI A  &hmr_left LEFT_CONTROL R  &hmr_left LEFT_ALT S  &hmr_left LEFT_SHIFT T               &kp G                &kp M              &hmr_right RIGHT_SHIFT N  &hmr_right RIGHT_ALT E  &hmr_right RIGHT_CONTROL I  &hmr_right RIGHT_GUI O  &none
&none  &kp Z                 &kp X                     &kp C                 &kp D                                &kp V                &kp K              &kp H                     &kp COMMA               &kp DOT                     &kp FSLH                &none
                                                       &kp BACKSPACE         &hold_or_kp LS(LA(LC(LGUI))) ESCAPE  &mo_or_kp 3 SPACE    &mo_or_kp 1 ENTER  &sk LEFT_SHIFT            &mo_or_kp 2 TAB
            >;

            label = "WRITE...";
        };

        MATH {
            bindings = <
&none  &kp LBKT   &kp N7        &kp N8  &kp N9     &kp RBKT     &none   &none            &none          &none              &none          &none
&none  &kp SEMI   &kp N4        &kp N5  &kp N6     &kp EQUAL    &none   &kp RIGHT_SHIFT  &kp RIGHT_ALT  &kp RIGHT_CONTROL  &kp RIGHT_GUI  &none
&none  &kp GRAVE  &kp NUMBER_1  &kp N2  &kp N3     &kp BSLH     &none   &none            &trans         &trans             &trans         &none
                                &trans  &kp MINUS  &kp N0       &trans  &trans           &trans
            >;

            label = "Math 0=1";
        };

        SPECIAL {
            bindings = <
&none  &kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_BRACE          &none   &none            &none          &none              &none          &none
&none  &kp COLON       &kp DOLLAR       &kp PERCENT   &kp CARET             &kp PLUS                 &none   &kp RIGHT_SHIFT  &kp RIGHT_ALT  &kp RIGHT_CONTROL  &kp RIGHT_GUI  &none
&none  &kp TILDE       &kp EXCLAMATION  &kp AT_SIGN   &kp HASH              &kp PIPE                 &none   &none            &trans         &trans             &trans         &none
                                        &trans        &kp UNDERSCORE        &kp RIGHT_PARENTHESIS    &trans  &trans           &trans
            >;

            label = "Special!";
        };

        MOVE {
            bindings = <
&none  &none         &kp C_BRIGHTNESS_MINIMUM  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_MAXIMUM    &none      &kp PAGE_UP     &kp LC(U)       &none         &none            &none
&none  &kp LEFT_GUI  &kp RIGHT_CONTROL         &kp RIGHT_ALT         &kp LEFT_SHIFT        &kp SPACE                   &kp SPACE  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &none
&none  &none         &kp K_MUTE                &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &none                       &none      &kp PAGE_DOWN   &kp LC(D)       &trans        &trans           &none
                                               &trans                &trans                &trans                      &trans     &trans          &trans
            >;

            label = "~Move~";
        };

        NUMPAD {
            bindings = <
&trans  &kp KP_DIVIDE  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MULTIPLY    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp KP_DOT     &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_EQUAL       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp KP_MINUS   &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_PLUS        &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans           &kp KP_ENTER     &kp KP_NUMBER_0    &trans  &trans  &trans
            >;

            label = "NUMPAD";
        };

        FN {
            bindings = <
&trans  &trans   &kp F7  &kp F8  &kp F9  &kp F10    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &kp F12    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans   &kp F1  &kp F2  &kp F3  &none      &trans  &trans  &trans  &trans  &trans  &trans
                         &trans  &trans  &trans     &trans  &trans  &trans
            >;

            label = "Fn Keys";
        };

        GAME {
            bindings = <
&none  &kp TAB    &kp Q  &kp W      &kp E     &kp R        &kp T      &none      &kp UP    &none      &none   &none
&none  &kp LSHFT  &kp A  &kp S      &kp D     &kp F        &kp G      &kp LEFT   &kp DOWN  &kp RIGHT  &none   &none
&none  &kp ESC    &kp Z  &kp X      &kp C     &kp V        &kp B      &kp N1     &kp N2    &kp N3     &kp N4  &none
                         &kp LCTRL  &kp LGUI  &kp SPACE    &kp ENTER  &kp SPACE  &none
            >;

            label = "game!!!";
        };

        SETUP {
            bindings = <
&none  &none          &none          &none          &none          &none            &none  &none  &none  &none  &bt BT_CLR_ALL  &none
&none  &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4     &none  &none  &none  &none  &none           &none
&none  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4    &none  &none  &none  &none  &bt BT_CLR      &none
                                     &none          &none          &none            &none  &none  &none
            >;

            label = "SETUP";
        };

        CODE {
            bindings = <
&trans  &trans  &kp SINGLE_QUOTE  &kp QUESTION  &kp PLUS       &trans    &trans  &kp ASTERISK           &kp SLASH        &kp GRAVE          &trans  &trans
&trans  &trans  &kp EXCLAMATION   &kp COLON     &kp EQUAL      &trans    &trans  &kp LEFT_PARENTHESIS   &kp LEFT_BRACE   &kp LEFT_BRACKET   &trans  &trans
&trans  &trans  &none             &kp PIPE      &kp AMPERSAND  &trans    &trans  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &trans  &trans
                                  &trans        &trans         &trans    &trans  &trans                 &trans
            >;

            label = "<Code>";
        };
    };
};
