/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hold_or_kp: hold_or_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_OR_KP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <0>;
        };

        mo_or_kp: mo_or_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_OR_KP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <0>;
            flavor = "hold-preferred";
        };

        hmr_left: hmr_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <75>;
            hold-trigger-key-positions = <39 41 40 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35>;
            hold-trigger-on-release;
        };

        hmr_right: hmr_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <75>;
            flavor = "balanced";
            hold-trigger-key-positions = <38 36 37 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        left_enter {
            bindings = <&kp ENTER>;
            key-positions = <3 4>;
        };

        right_thumb_bluetooth {
            bindings = <&mo 4>;
            key-positions = <40 41 39>;
        };

        left_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <28 27>;
        };

        left_delete {
            bindings = <&kp DELETE>;
            key-positions = <29 28>;
        };

        left_tab {
            bindings = <&kp TAB>;
            key-positions = <17 29>;
        };

        left_escape {
            bindings = <&kp ESCAPE>;
            key-positions = <3 2>;
        };

        soft_off {
            bindings = <&soft_off>;
            key-positions = <1 10>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        WRITE {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q                 &kp W                     &kp F                 &kp P                                &kp B                &kp J              &kp L                     &kp U                   &kp Y                       &kp SQT                 &none
&none  &hmr_left LEFT_GUI A  &hmr_left LEFT_CONTROL R  &hmr_left LEFT_ALT S  &hmr_left LEFT_SHIFT T               &kp G                &kp M              &hmr_right RIGHT_SHIFT N  &hmr_right RIGHT_ALT E  &hmr_right RIGHT_CONTROL I  &hmr_right RIGHT_GUI O  &none
&none  &kp Z                 &kp X                     &kp C                 &kp D                                &kp V                &kp K              &kp H                     &kp COMMA               &kp DOT                     &kp FSLH                &none
                                                       &kp BACKSPACE         &hold_or_kp LS(LA(LC(LGUI))) ESCAPE  &mo_or_kp 3 SPACE    &mo_or_kp 1 ENTER  &sk LEFT_SHIFT            &mo_or_kp 2 TAB
            >;

            label = "WRITE";
        };

        NUM {
            bindings = <
&none  &kp LBKT   &kp N7        &kp N8  &kp N9     &kp RBKT     &none   &none            &none          &none              &none          &none
&none  &kp SEMI   &kp N4        &kp N5  &kp N6     &kp EQUAL    &none   &kp RIGHT_SHIFT  &kp RIGHT_ALT  &kp RIGHT_CONTROL  &kp RIGHT_GUI  &none
&none  &kp GRAVE  &kp NUMBER_1  &kp N2  &kp N3     &kp BSLH     &none   &none            &trans         &trans             &trans         &none
                                &trans  &kp MINUS  &kp N0       &trans  &trans           &trans
            >;

            label = "NUM";
        };

        SYMBOL {
            bindings = <
&none  &kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_BRACE          &none   &none            &none          &none              &none          &none
&none  &kp COLON       &kp DOLLAR       &kp PERCENT   &kp CARET             &kp PLUS                 &none   &kp RIGHT_SHIFT  &kp RIGHT_ALT  &kp RIGHT_CONTROL  &kp RIGHT_GUI  &none
&none  &kp TILDE       &kp EXCLAMATION  &kp AT_SIGN   &kp HASH              &kp PIPE                 &none   &none            &trans         &trans             &trans         &none
                                        &trans        &kp UNDERSCORE        &kp RIGHT_PARENTHESIS    &trans  &trans           &trans
            >;

            label = "SYMBOL";
        };

        MOVE {
            bindings = <
&none  &kp A         &kp W              &kp S          &kp D           &kp R     &none   &none           &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none            &none
&none  &kp LEFT_GUI  &kp RIGHT_CONTROL  &kp RIGHT_ALT  &kp LEFT_SHIFT  &kp G     &none   &kp LEFT_ARROW  &kp DOWN_ARROW        &kp UP_ARROW          &kp RIGHT_ARROW  &none
&none  &none         &none              &none          &none           &kp V     &none   &kp C_MUTE      &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &none            &none
                                        &trans         &trans          &trans    &trans  &trans          &trans
            >;

            label = "MOVE";
        };

        SETUP {
            bindings = <
&none  &none          &none          &none          &none          &none            &none  &none  &none  &none  &bt BT_CLR_ALL  &none
&none  &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4     &none  &none  &none  &none  &none           &none
&none  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4    &none  &none  &none  &none  &bt BT_CLR      &none
                                     &none          &none          &none            &none  &none  &none
            >;

            label = "SETUP";
        };
    };
};
